import { serve } from "bun";
import { existsSync, readFileSync, writeFileSync } from "fs";

const PORT = 3000;
const GITHUB_TOKEN = process.env.GH_PAT_WEBHOOK;

const GITHUB_REPO = "mrfour4/seminar-gitops";
const ENV_FILE = ".env";

// H√†m ghi commit ID v√†o file .env
function saveHealthyCommit(commitId: string) {
    try {
        let envContent = "";

        // Ki·ªÉm tra n·∫øu file t·ªìn t·∫°i, ƒë·ªçc n·ªôi dung
        if (existsSync(ENV_FILE)) {
            envContent = readFileSync(ENV_FILE, "utf8");
        }

        // N·∫øu ƒë√£ c√≥ LAST_HEALTHY_COMMIT, thay th·∫ø gi√° tr·ªã
        if (envContent.includes("LAST_HEALTHY_COMMIT=")) {
            envContent = envContent.replace(/LAST_HEALTHY_COMMIT=.*/g, `LAST_HEALTHY_COMMIT=${commitId}`);
        } else {
            // N·∫øu ch∆∞a c√≥, th√™m m·ªõi v√†o cu·ªëi
            envContent += `\nLAST_HEALTHY_COMMIT=${commitId}`;
        }

        writeFileSync(ENV_FILE, envContent.trim(), "utf8");
        console.log(`‚úÖ Saved healthy commit ID to ${ENV_FILE}`);
    } catch (error) {
        console.error(`‚ùó Failed to save healthy commit: ${error}`);
    }
}

// H√†m ƒë·ªçc commit ID t·ª´ file .env
function loadHealthyCommit(): string | null {
    if (!existsSync(ENV_FILE)) {
        console.error("‚ùó No .env file found");
        return null;
    }
    try {
        const envContent = readFileSync(ENV_FILE, "utf8");
        const match = envContent.match(/LAST_HEALTHY_COMMIT=(.*)/);
        return match && match[1] ? match[1] : null;
    } catch (error) {
        console.error(`‚ùó Failed to load healthy commit: ${error}`);
        return null;
    }
}


// G·ª≠i webhook ƒë·∫øn GitHub ƒë·ªÉ revert
async function triggerGitHubRollback(failedRevision: string, healthyRevision: string) {
    const payload = {
        event_type: "argo-degraded",
        client_payload: {
            failed_revision: failedRevision,
            healthy_revision: healthyRevision,
        },
    };

    console.log("playload: ", payload)

    const response = await fetch(`https://api.github.com/repos/${GITHUB_REPO}/dispatches`, {
        method: "POST",
        headers: {
            "Authorization": `token ${GITHUB_TOKEN}`,
            "Content-Type": "application/json",
        },
        body: JSON.stringify(payload),
    });

    if (response.ok) {
        console.log("‚úÖ Triggered GitHub Actions for rollback");
    } else {
        console.error("‚ùå Failed to trigger GitHub Actions", await response.text());
    }
}

// X·ª≠ l√Ω y√™u c·∫ßu webhook t·ª´ Argo CD
async function handleRequest(req: Request): Promise<Response> {
    if (req.method !== "POST") {
        return new Response("Only POST requests are allowed", { status: 405 });
    }

    try {
        const data = await req.json();
        console.log("Received payload:", data);

        // Ki·ªÉm tra c·∫•u tr√∫c c·ªßa d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c
        if (typeof data !== "object" || data === null || !("app" in data) || !("status" in data) || !("revision" in data)) {
            console.error("‚ùó Invalid payload format:", data);
            return new Response("Invalid payload format", { status: 400 });
        }

        const { status, revision } = data as { status: string; revision: string };

        if (status === "Healthy") {
            // Ghi commit ID khi deploy th√†nh c√¥ng
            saveHealthyCommit(revision);
            return new Response("Commit ID saved", { status: 200 });
        }

        if (status === "Degraded") {
            // ƒê·ªçc commit ID khi deploy th·∫•t b·∫°i
            const lastHealthyCommit = loadHealthyCommit();
            if (!lastHealthyCommit) {
                console.error("‚ùå No healthy commit found for rollback");
                return new Response("No healthy commit found", { status: 500 });
            }

            console.log("‚úÖ Last Healthy Commit for rollback:", lastHealthyCommit);

            // G·ª≠i webhook ƒë·∫øn GitHub Actions
            await triggerGitHubRollback(revision, lastHealthyCommit);
            return new Response("Rollback triggered", { status: 200 });
        }

        return new Response("Webhook received", { status: 200 });
    } catch (error) {
        console.error("‚ùó Error handling request:", error);
        return new Response("Internal Server Error", { status: 500 });
    }
}

// Kh·ªüi ch·∫°y server webhook
serve({
    port: PORT,
    hostname: "0.0.0.0",
    fetch: handleRequest,
});

console.log(`üöÄ Webhook Server is running on http://localhost:${PORT}`);
